
import torch
from e3nn import o3

def wigner(l, axis, angle):
    if l == 0:
        w = torch.Tensor([1.0]).type_as(angle)
    elif l == 1:
        w = o3.Irreps("1x1o").D_from_axis_angle(axis, angle).reshape(3, 3)
    elif l == 2:
        R = o3.Irreps("1x1o").D_from_axis_angle(axis, angle).reshape(3, 3)
        w = torch.Tensor([[R[0,0]*R[1,1]+R[0,1]*R[1,0], R[0,1]*R[1,2]+R[0,2]*R[1,1], R[0,2]*R[1,2], R[0,0]*R[1,2]+R[0,2]*R[1,0], R[0,0]*R[1,0]-R[0,1]*R[1,1]],
                 [R[1,0]*R[2,1]+R[1,1]*R[2,0], R[1,1]*R[2,2]+R[1,2]*R[2,1], R[1,2]*R[2,2], R[1,0]*R[2,2]+R[1,2]*R[2,0], R[1,0]*R[2,0]-R[1,1]*R[2,1]],
                 [2.0*R[2,0]*R[2,1]-R[0,0]*R[0,1]-R[1,0]*R[1,1], 2.0*R[2,1]*R[2,2]-R[0,1]*R[0,2]-R[1,1]*R[1,2], R[2,2]*R[2,2]-0.5*R[0,2]*R[0,2]-0.5*R[1,2]*R[1,2], 2.0*R[2,0]*R[2,2]-R[0,0]*R[0,2]-R[1,0]*R[1,2], R[2,0]*R[2,0]+0.5*R[0,1]*R[0,1]+0.5*R[1,1]*R[1,1]-0.5*R[0,0]*R[0,0]-0.5*R[1,0]*R[1,0]-R[2,1]*R[2,1]],
                 [R[0,0]*R[2,1]+R[0,1]*R[2,0], R[0,1]*R[2,2]+R[0,2]*R[2,1], R[0,2]*R[2,2], R[0,0]*R[2,2]+R[0,2]*R[2,0], R[0,0]*R[2,0]-R[0,1]*R[2,1]],
                 [R[0,0]*R[0,1]-R[1,0]*R[1,1], R[0,1]*R[0,2]-R[1,1]*R[1,2], 0.5*(R[0,2]*R[0,2]-R[1,2]*R[1,2]), R[0,0]*R[0,2]-R[1,0]*R[1,2], 0.5*(R[0,0]*R[0,0]+R[1,1]*R[1,1]-R[1,0]*R[1,0]-R[0,1]*R[0,1])]]).type_as(angle)
    else:
        raise ValueError
    return w
            
        